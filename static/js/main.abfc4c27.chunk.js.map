{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","high-order-components/Rainbow.js","components/Contact.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","react_default","a","createElement","className","href","react_router_dom","to","Home","state","posts","_this2","this","axios","get","then","res","console","log","setState","data","slice","postList","length","map","post","id","key","src","Pokeball","alt","title","body","Component","Rainbow","WrappedComponent","Math","floor","random","Contact","Post","match","params","post_id","App","components_Navbar","react_router","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abfc4c27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react';\nimport { Link, NavLink , withRouter} from 'react-router-dom';\n\nconst Navbar = (props) => {\n    \n    return (\n        <nav className=\"nav-wrapper red darken-3\">\n            <div className=\"container\">\n                <a href=\"\" className=\"brand-logo\">Poke'Times</a>\n                <ul className=\"right\">\n                    <li><Link to =\"/\">Home</Link></li>\n                    <li><NavLink to=\"/about\">About</NavLink></li>\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li>\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport default withRouter(Navbar);","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\nimport Pokeball from '../pokeball.png'\n\nclass Home extends Component {\n  state = {\n    posts: []\n  };\n\n  componentDidMount() {\n    axios.get(`https://jsonplaceholder.typicode.com/posts`)\n    .then(res => {\n      console.log(res);\n      this.setState({\n        posts: res.data.slice(0, 10)\n      });\n    });\n  }\n\n  render() {\n      const { posts } = this.state\n      const postList = posts.length \n        ? ( posts.map(post => {\n            return (\n                <div id=\"post\" className=\"post card\" key={post.id}>\n                    <img id=\"pokeball\" src={Pokeball} alt=\"A pokeball\" />\n                    <div className=\"card-content\">\n                        <Link to={'/' + post.id}> \n                            <span className=\"card-title red-text\">{post.title}</span>\n                        </Link>\n                        <p>{post.body}</p>\n                    </div>\n                </div>\n            )\n        }))\n        : (<div className=\"center\">No posts yet</div>)\n    return (\n      <div className=\"container\">\n        <h4 className=\"center\">Home</h4>\n       {postList}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport Rainbow from '../high-order-components/Rainbow'\n\nconst About = () => {\n    return (\n        <div className=\"container\">\n            <h4 className=\"center\">About</h4>\n            <p>Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker</p>\n        </div>\n    );\n};\n\nexport default Rainbow(About);","import React from \"react\";\n\nconst Rainbow = WrappedComponent => {\n  const colours = [\"red\", \"pink\", \"orange\", \"blu\", \"green\", \"yellow\"];\n  const randomColour = colours[Math.floor(Math.random() * 5)]; // pour selectionner une couleur random dans l'array\n  const className = randomColour + \"-text\";\n  return props => {\n    return (\n      <div className={className}>\n        <WrappedComponent {...props}/>\n      </div>\n    );\n  };\n};\n\nexport default Rainbow;\n","import React from 'react';\n\nconst Contact = (props) => {\n    console.log(props)\n\n    // setTimeout(() => {\n    //     props.history.push('/about')\n    // }, 2000);  redirection programmée possible grace à react-router\n\n    return (\n        <div className=\"container\">\n            <h4 className=\"center\">Contact</h4>\n            <p>Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker</p>\n        </div>\n    );\n};\n\nexport default Contact;","import React, { Component } from 'react'\nimport axios from 'axios';\n\nexport default class Post extends Component {\n    state = {\n        post: null\n    }\n    componentDidMount(){\n        console.log(this.props);  // component class receives props automatically\n        let id = this.props.match.params.post_id;\n        axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\n            .then(res => {\n                this.setState({\n                    post: res.data\n                })\n                console.log(res)\n            })\n        \n    }\n    render() {\n        const post = this.state.post \n        ? ( <div className=\"post\">\n            <h4 className=\"center\">{this.state.post.title}</h4>\n            <p>{this.state.post.body}</p>\n        </div>)\n        : ( <div className=\"center\">Loading post...</div>)\n        return (\n            <div className=\"container\">\n                <h4></h4>\n                {post}\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Post from \"./components/Post\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/contact\" component={Contact} />\n            <Route path=\"/:post_id\" component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}